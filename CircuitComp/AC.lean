import CircuitComp.Basic
import CircuitComp.NC

import Mathlib.Algebra.MvPolynomial.Eval
import Mathlib.Algebra.MvPolynomial.Degrees

open FeedForward
open CircuitFamily

/-!
Defines the class AC‚ÇÄ, which is typically defined as constant-depth boolean circuits with
arbitrary fan-in AND and OR gates, and NOT gates.
We define it as circuits with arbitrary fan-in AND, and NOT gates (at any layer).

Also define `ACi`, which is like AC‚ÇÄ but has `log(n)^i` depth. `AC` is the union of all `ACi`.

# Theorems
 * These are equivalent definitions
 * AC‚ÇÄ cannot compute the Parity function

# References
[www.tu-chemnitz.de](https://www.tu-chemnitz.de/informatik/theoretische-informatik/publications/2013-RANDOM-CNF-sensitivity.pdf_
[cs.washington.edu](https://homes.cs.washington.edu/~anuprao/pubs/CSE531Winter12/lecture10.pdf)

-/

def AC‚ÇÄ_GateOps : Set (GateOp (Fin 2)) :=
  {‚ü®Unit, fun x ‚Ü¶ 1 - x ()‚ü©} --NOT
  ‚à™
  ‚ãÉ n, {‚ü®Fin n, fun x ‚Ü¶ ‚àè i, x i‚ü©} --ANDs of all arity

/-- AC‚ÇÄ, the constant-depth polynomial-size circuits of NOT gates and arbitrary-arity AND gates. -/
def AC‚ÇÄ : Set (FuncFamily (Fin 2)) :=
  CircuitClass .poly .const AC‚ÇÄ_GateOps

/-- The circuit class of nonuniform ACi: polynomial-size circuits with
NOTs and arbitrary fan-in ANDs, and depth O(log‚Å± n). -/
def ACi (i : ‚Ñï) : Set (FuncFamily (Fin 2)) :=
  CircuitClass .poly (.bigO (Nat.log2 ¬∑ ^ i)) AC‚ÇÄ_GateOps

/-- AC‚ÇÄ is the 0th element of the ACi hierarchy -/
theorem ACi_zero : ACi 0 = AC‚ÇÄ := by
  rfl

def AC : Set (FuncFamily (Fin 2)) :=
  ‚ãÉ i, ACi i

theorem ACi_subset_NC (i : ‚Ñï) : ACi i ‚äÜ AC :=
  Set.subset_iUnion_of_subset i fun _ ‚Ü¶ id

/-- The class NC‚ÇÄ is contained in AC‚ÇÄ. -/
theorem NC‚ÇÄ_subset_AC‚ÇÄ : NC‚ÇÄ ‚äÜ AC‚ÇÄ := by
  apply CircuitClass.Monotone_gates
  intro g
  rw [NC‚ÇÄ_GateOps, AC‚ÇÄ_GateOps]
  simp only [Set.mem_insert_iff, Set.mem_singleton_iff, Set.iUnion_singleton_eq_range,
    Set.singleton_union, Set.mem_range]
  rintro (rfl|rfl)
  ¬∑ simp
  ¬∑ right
    use 2
    simp_rw [Fin.prod_univ_two]

/-- The AND problem is contained in AC‚ÇÄ, because we can take a single AND gate. -/
theorem AND_mem_AC‚ÇÄ : FuncFamily.AND ‚àà AC‚ÇÄ := by
  use (fun n ‚Ü¶ ‚ü®
    1,
    ![Fin n, Unit],
    fun d h ‚Ü¶ ‚ü®‚ü®Fin n, fun x ‚Ü¶ ‚àè i, x i‚ü©, by rw [Fin.fin_one_eq_zero d]; exact id‚ü©,
    rfl,
    rfl
  ‚ü©)
  and_intros
  ¬∑ intro
    ext
    rfl
  ¬∑ intro n
    rw [FeedForward.finite]
    simp only [Fin.isValue, Fin.castSucc_zero, Matrix.cons_val_zero, id_eq, eq_mpr_eq_cast,
      Fin.reduceLast, Matrix.cons_val_one, Nat.reduceAdd]
    intro i
    fin_cases i <;> simp <;> infer_instance
  ¬∑ simp [size]
    use 0
    simp only [Nat.cast_one, pow_zero, Asymptotics.isBigO_const_const_iff, imp_self]
  ¬∑ simp only [hasDepth, GrowthRate.const, GrowthRate.bigO, Pi.one_apply, Nat.cast_one,
      Set.mem_setOf_eq, Asymptotics.isBigO_const_const_iff, one_ne_zero, imp_self]
  ¬∑ simp only [CircuitFamily.onlyUsesGates, FeedForward.onlyUsesGates]
    intro n d _
    simp only [AC‚ÇÄ_GateOps, Fin.isValue, Set.iUnion_singleton_eq_range, Set.singleton_union,
      Set.mem_insert_iff, GateOp.mk.injEq, Set.mem_range]
    right
    use n

theorem NC‚ÇÄ_ssubset_AC‚ÇÄ : NC‚ÇÄ ‚äÇ AC‚ÇÄ := by
  refine ssubset_of_ne_of_subset ?_ NC‚ÇÄ_subset_AC‚ÇÄ
  exact (ne_of_mem_of_not_mem' AND_mem_AC‚ÇÄ AND_not_mem_NC‚ÇÄ).symm

/-- Functions in AC‚ÇÄ are well approximated by a low-degree polynomial in ùîΩ‚ÇÉ. -/
theorem AC‚ÇÄ_low_degree : ‚àÄ F ‚àà AC‚ÇÄ, ‚àÉ (P : (n : ‚Ñï) ‚Üí MvPolynomial (Fin n) (Fin 3)),
    --The degree is polylog(n)
    (MvPolynomial.totalDegree <| P ¬∑ : ‚Ñï ‚Üí ‚Ñï) ‚àà GrowthRate.polylog
    ‚àß
    ( ‚àÄ n, --The polynomial agrees on at least 2/3rd of inputs
      { x | (F n x).val = (P n).eval (fun i ‚Ü¶ ‚ü®x i, Nat.lt_succ_of_lt (x i).2‚ü©)
      }.ncard ‚â• (2/3 : ‚Ñö) * 2^n
    )
    := by
  --Induction on depth
  --If the final gate is a NOT: use 1-P
  --If the final gate is an AND: use 1 - Œ†_{k=‚Ñì} (1 - (‚àë_{i‚ààS‚Çñ} P_i)^2 ) where we pick ‚Ñì random
  -- sets S‚Çñ. See https://homes.cs.washington.edu/~anuprao/pubs/CSE531Winter12/lecture10.pdf
  sorry

/-- The parity function is not well approximated by low-degree polynomials in ùîΩ‚ÇÉ. -/
theorem parity_not_low_degree : ¬¨‚àÉ (P : (n : ‚Ñï) ‚Üí MvPolynomial (Fin n) (Fin 3)),
    --The degree is polylog(n)
    (MvPolynomial.totalDegree <| P ¬∑ : ‚Ñï ‚Üí ‚Ñï) ‚àà GrowthRate.polylog
    ‚àß
    ( ‚àÄ n, --The polynomial agrees on at least 2/3rd of inputs
      { x | (FuncFamily.PARITY n x).val = (P n).eval (fun i ‚Ü¶ ‚ü®x i, Nat.lt_succ_of_lt (x i).2‚ü©)
      }.ncard ‚â• (2/3 : ‚Ñö) * 2^n
    )
    := by
  --Theorem 6 in https://homes.cs.washington.edu/~anuprao/pubs/CSE531Winter12/lecture10.pdf
  sorry

/-- AC‚ÇÄ cannot compute parity: it is too sensitive. -/
theorem AC‚ÇÄ_not_parity : FuncFamily.PARITY ‚àâ AC‚ÇÄ := by
  by_contra h
  replace h := AC‚ÇÄ_low_degree _ h
  exact parity_not_low_degree h
